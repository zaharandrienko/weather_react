{"version":3,"sources":["components/content.js","components/form.js","components/result.js","App.js","serviceWorker.js","index.js"],"names":["Content","react_default","a","createElement","Component","Form","onSubmit","this","props","weatherMethod","type","name","placeholder","Result","className","city","temp","sunrise","error","API_KEY","App","state","undefined","getWeather","_callee","e","api_url","data","date","sunrise_date","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","sys","Date","setTime","getHours","getMinutes","getSeconds","_this","setState","main","stop","content","src_components_form","components_result","Boolean","window","location","hostname","match","ReactDOM","render","styles","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0MAYeA,0LARX,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,8CAJcC,cCYPC,0LATX,OACEJ,EAAAC,EAAAC,cAAA,QAAMG,SAAUC,KAAKC,MAAMC,eACzBR,EAAAC,EAAAC,cAAA,SAAOO,KAAK,OAAOC,KAAK,OAAOC,YAAY,iBAC3CX,EAAAC,EAAAC,cAAA,qCALWC,cCiBJS,0LAfX,OACEZ,EAAAC,EAAAC,cAAA,OAAKW,UAAU,UACZP,KAAKC,MAAMO,MACVd,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,oBAAYI,KAAKC,MAAMO,MACvBd,EAAAC,EAAAC,cAAA,2BAAmBI,KAAKC,MAAMQ,MAC9Bf,EAAAC,EAAAC,cAAA,uBAAeI,KAAKC,MAAMS,UAG9BhB,EAAAC,EAAAC,cAAA,UAAKI,KAAKC,MAAMU,eAXHd,cCIfe,EAAU,mCAoEDC,6MAhEfC,MAAQ,CACNN,UAAOO,EACPN,UAAOM,EACPL,aAAUK,EACVJ,WAAQI,KAKVC,iDAAa,SAAAC,EAAOC,GAAP,IAAAV,EAAAW,EAAAC,EAAAV,EAAAW,EAAAC,EAAA,OAAAC,EAAA5B,EAAA6B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UACXT,EAAEU,mBACIpB,EAAOU,EAAEW,OAAOC,SAAStB,KAAKuB,OAFzB,CAAAN,EAAAE,KAAA,gBAAAF,EAAAE,KAAA,EAMaK,MAAK,qDAAAC,OAAsDzB,EAAtD,WAAAyB,OAAoErB,EAApE,kBANlB,cAMHO,EANGM,EAAAS,KAAAT,EAAAE,KAAA,EAOWR,EAAQgB,OAPnB,OAOHf,EAPGK,EAAAS,KAULxB,EAAUU,EAAKgB,IAAI1B,SACnBW,EAAO,IAAIgB,MACVC,QAAQ5B,GACTY,EAAeD,EAAKkB,WAAa,IAAMlB,EAAKmB,aAAe,IAAMnB,EAAKoB,aAG1EC,EAAKC,SAAS,CACZlC,KAAOW,EAAKwB,KAAKnC,KACjBD,KAAOY,EAAKhB,KACZM,QAAUY,EACVX,WAAQI,IApBDU,EAAAE,KAAA,iBAuBTe,EAAKC,SAAS,CACZnC,UAAOO,EACPN,UAAOM,EACPL,aAAUK,EACVJ,MAAQ,6GA3BD,yBAAAc,EAAAoB,SAAA5B,EAAAjB,uIAwCT,OACEN,EAAAC,EAAAC,cAAA,OAAKW,UAAU,WACbb,EAAAC,EAAAC,cAACkD,EAAD,MACApD,EAAAC,EAAAC,cAACmD,EAAD,CAAM7C,cAAeF,KAAKgB,aAC1BtB,EAAAC,EAAAC,cAACoD,EAAD,CACEvC,KAAMT,KAAKc,MAAML,KACjBD,KAAMR,KAAKc,MAAMN,KACjBE,QAASV,KAAKc,MAAMJ,QACpBC,MAAOX,KAAKc,MAAMH,gBA5DVd,aCIEoD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,wECXNC,IAASC,OAAO7D,EAAAC,EAAAC,cAAC4D,EAAA,iBAAD,KAAkB9D,EAAAC,EAAAC,cAAC6D,EAAD,OAA4BC,SAASC,eAAe,SD0HhF,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9de81096.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Content extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Get weather in your city</h1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Content;","import React, { Component } from 'react';\r\nimport './form.css';\r\n\r\nclass Form extends Component {\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.props.weatherMethod}>\r\n        <input type=\"text\" name=\"city\" placeholder=\"city name 22\"/>\r\n        <button>get weather</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form ;","import React, { Component } from 'react';\r\nimport './result.css';\r\n\r\nclass Result extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"result\">\r\n        {this.props.city &&\r\n          <div>\r\n            <h1>City : {this.props.city}</h1>\r\n            <h2>Temperature : {this.props.temp}</h2>\r\n            <h2>Sunrise : {this.props.sunrise}</h2>\r\n          </div>\r\n        }\r\n        <h1>{this.props.error}</h1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Result;","import React, { Component } from 'react';\nimport './App.css';\nimport Content from \"./components/content\"\nimport Form from \"./components/form\"\nimport Result from \"./components/result\"\n\n\nconst API_KEY = \"987c0f266dfe1fd5acc66406faf05271\" ;\nclass App extends Component {\n\n\nstate = {\n  city : undefined,\n  temp : undefined,\n  sunrise : undefined ,\n  error : undefined\n}\n\n\n\ngetWeather = async (e) => {\n  e.preventDefault();\n  const city = e.target.elements.city.value;\n  // const api_url = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`);\n  // const data = await  api_url.json();\n  if(city){\n    const api_url = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`);\n    const data = await  api_url.json();\n\n\n    var sunrise = data.sys.sunrise;\n    var date = new Date();\n    date.setTime(sunrise);\n    var sunrise_date = date.getHours() + \":\" + date.getMinutes() + \":\" + date.getSeconds() ; \n\n\n    this.setState({\n      temp : data.main.temp,\n      city : data.name,\n      sunrise : sunrise_date,\n      error : undefined\n    });\n  }else{\n    this.setState({\n      city : undefined,\n      temp : undefined,\n      sunrise : undefined ,\n      error : \"Введіть назву міста\"\n    })\n  }\n\n  // this.setState({\n  //   temp : data.main.temp,\n  //   city : data.name,\n  //   sunrise : data.sys.sunrise,\n  //   error : \"\" \n  // });\n}\n\n  render() {\n    return (\n      <div className=\"general\">\n        <Content></Content>\n        <Form weatherMethod={this.getWeather}></Form>\n        <Result\n          temp={this.state.temp}\n          city={this.state.city}\n          sunrise={this.state.sunrise}\n          error={this.state.error}\n        ></Result>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { MuiThemeProvider } from '@material-ui/core';\n\nReactDOM.render(<MuiThemeProvider><App /></MuiThemeProvider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}